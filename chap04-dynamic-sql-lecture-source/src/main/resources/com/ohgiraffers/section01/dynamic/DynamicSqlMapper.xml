<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.ohgiraffers.section01.dynamic.DynamicSqlMapper">

    <!-- index. 넘겨받은 price 가 0 ~ 10000 사이 일 때, 10000 ~ 20000 사이 일 때,
                20000 ~ 30000 사이 일 때, 30000 초과일 때 -->
    <!-- comment. <if> 태그 : test 속성의 조건에 해당 할 때만 엘리먼트 구문을 쿼리에 추가
                  gte(크거나 같음), gt(보다 큼), lte(작거나 같음), lt(보다 작음) 등등
                  <![CDATA[문장]]> 문장에 해당하는 공간에서는 부등호 표현이 자유롭다. -->

    <!-- comment. 별칭 설정 config type 에 경로를 쓰지않고 별칭으로 사용할 수 있게 함 -->
    <resultMap id="menuResultMap" type="MenuDTO">
        <id property="menuCode" column="MENU_CODE"/>
        <result property="menuName" column="MENU_NAME"/>
        <result property="menuPrice" column="MENU_PRICE"/>
        <result property="categoryCode" column="CATEGORY_CODE"/>
        <result property="orderableStatus" column="ORDERABLE_STATUS"/>

    </resultMap>

    <select id="selectMenuByPrice" parameterType="hashmap" resultMap="menuResultMap">
        SELECT
            MENU_CODE,
            MENU_NAME,
            MENU_PRICE,
            CATEGORY_CODE,
            ORDERABLE_STATUS
        FROM
            TBL_MENU
        WHERE
            ORDERABLE_STATUS = 'Y'
        <if test="price gte 0 and price lte 10000">
            <![CDATA[
            And MENU_PRICE < #{price}
            ]]>
        </if>
        <if test="price gt 10000 and price lte 20000">
            And MENU_PRICE BETWEEN 10000 AND #{price}
        </if>
        <if test="price gt 20000 and price lte 30000">
            And MENU_PRICE BETWEEN 20000 AND #{price}
        </if>
        <if test="price gt 30000">
            And MENU_PRICE BETWEEN 30000 AND #{price}
        </if>
        ORDER BY
            MENU_CODE
    </select>

    <!--
        condition 이라는 변수에 메뉴와 카테고리를 입력 할 수 있는 데,
        메뉴로 선택을 하면, join 할 필요 없이 검색어에 해당하는 메뉴 조회
        카테고리로 선택을 하면, join 을 하여 카테고리명에 해당하는 메뉴 조회
     -->
    <select id="searchMenu" parameterType="com.ohgiraffers.common.SearchCriteria" resultMap="menuResultMap">
        SELECT
            A.MENU_CODE,
            A.MENU_NAME,
            A.CATEGORY_CODE,
            A.ORDERABLE_STATUS
        FROM
            TBL_MENU A
        <if test="condition == 'category'">
            JOIN
            TBL_CATEGORY B
            ON
            (A.CATEGORY_CODE = B.CATEGORY_CODE)
        </if>
        WHERE
            A.ORDERABLE_STATUS = 'Y'
            <if test="condition == 'menuName'">
                AND A.MENU_NAME LIKE CONCAT('%',#{value},'%')
            </if>
            <if test="condition == 'category'">
                AND B.CATEGORY_NAME = #{value}
            </if>
        ORDER BY
            A.MENU_CODE
    </select>

    <!-- comment. <choose>(when/otherwise) 태그 : java 의 switch-case 문의 역할
                  <choose>
                    <when test = "조건">
                    </when>
                    '''(여러개)
                    <otherwise>
                        쿼리문
                    </otherwise>
                  </choose>
                  test 속성 조건에 부합하면 해당하는 when 구문의 쿼리문을 수행
                  어떠한 when 구문의 조건도 만족하지 못하면 otherwise 구문의 쿼리문을 수행 -->
    <select id="searchMenuBySupCategory" parameterType="com.ohgiraffers.common.SearchCriteria" resultMap="menuResultMap">
        SELECT
            *
        FROM
            TBL_MENU
        WHERE
            ORDERABLE_STATUS = 'Y'
        <choose>
            <when test="value == '식사'">
                AND CATEGORY_CODE IN (1, 4, 5)
            </when>
            <when test="value == '음료'">
                AND CATEGORY_CODE IN (2)
            </when>
            <otherwise>
                AND CATEGORY_CODE IN (3)
            </otherwise>
        </choose>
        ORDER BY
            MENU_CODE
    </select>


    <!-- comment. <foreach> 태그 : java 했던 for 문의 역할을 한다.
            1. collection 속성 : 반복을 수행 할 대상
            2. item 속성 : 반복을 수행 할때마다 꺼내올 값을 담아 둘 변수
            3. open 속성 : <foreach> 엘리먼트 구문의 가장 앞에 올 문자
            4. separator 속성 : 반복이 수행될 때 꺼내온 item 사이에 들어 갈 문자
            5. close 속성 : <foreach> 엘리먼트 구문의 마지막에 올 문자 -->
    <select id="searchMenuByRandomCode" parameterType="hashmap" resultMap="menuResultMap">
        SELECT
            *
        FROM
            TBL_MENU
        WHERE
            ORDERABLE_STATUS = 'Y'
            AND
            MENU_CODE IN
            <foreach collection="randomCodeList" item="menuCode" open="(" close=")" separator=",">
                #{menuCode}
            </foreach>
    </select>

    <!-- 검색 조건이 없으면 전체 조회, 있으면 menuCode 로 조회 -->
    <select id="searchMenuByCodeOrSearchAll" parameterType="Search" resultMap="menuResultMap">
        SELECT
            *
        FROM
            TBL_MENU
        <if test="condition != null and condition eq 'menuCode'">
            <where>
                MENU_CODE = #{value}
            </where>
        </if>
    </select>

    <select id="searchMenuByNameOrCategory" parameterType="hashmap" resultMap="menuResultMap">
        SELECT
            *
        FROM
            TBL_MENU
        <!-- index 1. 문제 상황 : 카테고리로만 조회하는 경우 WHERE 생략으로 인한 문법 오류 발생 -->
<!--        <if test="nameValue != null">-->
<!--            WHERE MENU_NAME LIKE CONCAT('%', #{nameValue}, '%')-->
<!--        </if>-->
<!--        <if test="categoryValue != null">-->
<!--            AND CATEGORY_CODE = #{categoryValue}-->
<!--        </if>-->
        <!-- comment 1. 문제 해결 방안 <where> 태그 사용
                <where> 태그
                 - 내부에 구문이 where 절으로 시작하지 않으면 자동으로 where 붙여준다.
                 - 또한, where 엘리먼트 내부에 모든 쿼리문이 동작하지 않는다면 where 무시한다. (nameValue,categoryValue null 일때)
                 - where 엘리먼트 내부 쿼리문에 where 를 직접 입력하면 where where 구문이 되므로 주의해야 한다.
                 - 엘리먼트 내부 쿼리문이 AND || OR 로 시작한다면 자동으로 지워준다. ★
        -->
            <where>
            <if test="nameValue != null">
                MENU_NAME LIKE CONCAT('%', #{nameValue}, '%')
            </if>
            <if test="categoryValue != null">
                AND
                CATEGORY_CODE = #{categoryValue}
            </if>
            </where>
    </select>
</mapper>